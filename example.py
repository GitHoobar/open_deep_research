#!/usr/bin/env python3
"""
Design Doc Agent Test: Usage-Based Pricing Model for Code Review & Doc Generation

This script will analyze the entelligenceAI/backend repository and generate a comprehensive 
design document for implementing a usage-based pricing model with credits.
"""

import asyncio
import os
import sys
from pathlib import Path

# Add the src directory to the Python path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

from dotenv import load_dotenv
from open_deep_research.deep_researcher import design_doc_agent

# Load environment variables
load_dotenv()

async def generate_pricing_model_design():
    """
    Generate a design document for usage-based pricing model
    """
    print("🏗️  Design Doc Agent - Usage-Based Pricing Model")
    print("=" * 70)
    print("🔒 Repository: entelligenceAI/backend")
    print("💰 Focus: Usage-Based Pricing with Credits System")
    print()
    
    # Check for required environment variables
    github_token = os.getenv("GITHUB_ACCESS_TOKEN")
    openai_key = os.getenv("OPENAI_API_KEY")
    
    if not github_token or not openai_key:
        print("❌ Missing required environment variables:")
        if not github_token:
            print("   - GITHUB_ACCESS_TOKEN")
        if not openai_key:
            print("   - OPENAI_API_KEY")
        return

    # Detailed query for pricing model design
    pricing_query = """Design a usage-based pricing model for our code review and doc generation platform."""

    # Configuration for comprehensive analysis
    config = {
        "configurable": {
            "allow_clarification": False,
            "max_concurrent_analysis_units": 1,  # Enhanced parallel analysis
            "max_analysis_iterations": 1,  # Deep analysis for complex pricing system
            "github_repo_url": "https://github.com/Entelligence-AI/backend",
            "github_access_token": github_token,
            "model": "gpt-4.1-mini",  # Best model for complex business logic
            "temperature": 0.1,  # Focused, precise responses
        }
    }

    try:
        print("🔍 Analyzing repository architecture...")
        print("💰 Designing usage-based pricing model...")
        print("⏳ This comprehensive analysis may take 3-5 minutes...")
        print()
        
        # Run the design doc agent
        result = await design_doc_agent.ainvoke(
            {"messages": [{"role": "user", "content": pricing_query}]},
            config=config
        )
        
        print("✅ Pricing Model Design Document Generated!")
        print("=" * 60)
        
        # Extract the content
        final_message = result["messages"][-1]
        if hasattr(final_message, 'content'):
            content = final_message.content
        elif isinstance(final_message, dict) and 'content' in final_message:
            content = final_message['content']
        else:
            content = str(final_message)
        
        # Display preview
        print("📄 Design Document Preview:")
        print("-" * 40)
        preview_length = 1000
        print(content[:preview_length] + "..." if len(content) > preview_length else content)
        
        # Save the comprehensive design document
        filename = "entelligence_usage_based_pricing_model_design_2.md"
        with open(filename, "w") as f:
            f.write("# Usage-Based Pricing Model Design - entelligenceAI/backend\n")
            f.write("*Generated by Entelligence Doc Agent*\n\n")
            f.write(content)

            print(f" Done!")
        
    except Exception as e:
        print(f" Error during analysis: {e}")
if __name__ == "__main__":
    print()
    
    asyncio.run(generate_pricing_model_design()) 